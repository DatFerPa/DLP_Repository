Un programa es una secuencia de variables y definiciones de funciones. (done)
La sintaxis de la definición de una variable es la palabra reservada var (done)
seguido de una lista, con al menos un elemento, de identificadores separados por comas (done)
y un tipo. 

programa: lista_definiciones FUNC MAIN '('')' '{' lista_sentencias '}' 

lista_definiciones: 

definicion_variable: VAR identificadores tipo ';'

identificadores: 

tipo:...

Las definiciones de variables terminan mediante el caracter ';' (done)

Las funciones se definen especificando la palabra reservada func, el identificador de (done)
la función, una lista de parametros separados por comas entre '(' y ')' y el tipo
de retorno. 

El tipo de retorno y de los parámetros debe ser de tipo simple (no se permiten  (done)
ni arrays ni registros). El cuerpo de la funcion va entre '{' y '}'.

El cuerpo de las funciones son secuencias de definiciones de variables seguidos 
por una secuencia de sentencias. En ambos casos terminan con el caracter ';'

La funcion "main" debe estar la última, no retorna nada y no tiene parámetros. (done)

Los tipos simples son "int", "float32" y "char". (done)

Los arrays se pueden crear con el constructor de tipos "[]", siguiendo la sintaxis Go: (done)
 var nombre_variable [INT] tipo; el tamaño t se especifica con un entero (como en C).
 
Se usa el constructor de tipos "struct" para la creacion de registros. Los  (done)
registros no tienen identificador, y los campos son declarados como variables 
dentro de '{' '}'. No se permite la definicion de tipos (p.e. typedef)

Una escritura es la palabra reservada "write" seguida de una lista de expresiones (done)
 separadas por comas entre '(' y ')'.
 
Una lectura es la palabra reservada "read" seguida de una lista de expresiones (done)
separadas por comas entre '(' y ')'.

Una asignación está compuesta por dos expresiones separadas por el operador '='. (sentencia done)

La sentencia condicional "if"-"else" y la sentencia iterativa "while" siguen la (done)
sintaxis del lenguaje C. Los '(' y ')' son opcionales.

Se permite la sentencia 'return' <expresion> (la expresion es obligatoria). (done)

La invocación a una función será una nueva expresión cuando retorne un valor. (no entiendo)

Un procedimiento (función sin tipo de retorno) será siempre sentencia. (tengo dudas en esto)

La conversión explícita a tipos simples (cast) se realizará utilizando la sintaxis (done)
 del lenguaje Go: tipo '(' expresión ')'
 
 
Las expresiones están formadas por: (done)
- Constantes enteras, reales y caracter sin signo.
- Identificadores
- Los siguientes operadores aplicados a una o dos expresiones (por orden de precedencia descendente):
		( )			Sin asociatividad
		 .			A Izquierdas
		[]			Sin asociatividad
		- (unario)	A Derechas
		! 			A Derechas
		* / %		A Izquierdas
		+ -			A Izquierdas
> >= < <= != ==		A Izquierdas
		&& || 		A Izquierdas
		=			A derechas (duda con asignacion/sentencia)
		
//cosas practica 4

programa: lista_definiciones FUNC MAIN '(' ')' '{' lista_def_variables lista_sentencias '}'
		{
			this.ast = new Programa(linea, columna, (List<Definicion>)$1, ()$7,()$8);
		}	
		
		
		
		
tipo: INT
	| FLOAT32
	|CHAR
	| '[' DTE_Entera ']' tipo {$$ = new TipoArray($2,$4)}
